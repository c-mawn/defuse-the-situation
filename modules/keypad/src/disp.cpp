#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include "esp_random.h"


#define OLED_MOSI     10
#define OLED_CLK      8
#define OLED_DC       7
#define OLED_CS       5
#define OLED_RST      9
//#define BTN1 11
#define BTN1 6
// #define BTN2 12
#define BTN2 4
// #define BTN3 4
#define BTN3 0
// #define BTN4 13
#define BTN4 1

// Button debouncing
const uint8_t DEBOUNCE_DELAY = 10; // in milliseconds

struct Button {
    // state variables
    uint8_t  pin;
    bool     lastReading;
    uint32_t lastDebounceTime;
    uint16_t state;

    // methods determining the logical state of the button
    bool pressed()                { return state == 1; }
    bool released()               { return state == 0xffff; }
    bool held(uint16_t count = 0) { return state > 1 + count && state < 0xffff; }

    // method for reading the physical state of the button
    void read() {
        // reads the voltage on the pin connected to the button
        bool reading = digitalRead(pin);

        // if the logic level has changed since the last reading,
        // we reset the timer which counts down the necessary time
        // beyond which we can consider that the bouncing effect
        // has passed.
        if (reading != lastReading) {
            lastDebounceTime = millis();
        }

        // from the moment we're out of the bouncing phase
        // the actual status of the button can be determined
        if (millis() - lastDebounceTime > DEBOUNCE_DELAY) {
            // don't forget that the read pin is pulled-up
            bool pressed = reading == LOW;
            if (pressed) {
                     if (state  < 0xfffe) state++;
                else if (state == 0xfffe) state = 2;
            } else if (state) {
                state = state == 0xffff ? 0 : 0xffff;
            }
        }

        // finally, each new reading is saved
        lastReading = reading;
    }
};

Button button1      = { BTN1, HIGH, 0, 0 };
Button button2      = { BTN2, HIGH, 0, 0 };
Button button3      = { BTN3, HIGH, 0, 0 };
Button button4      = { BTN4, HIGH, 0, 0 };

// Create the OLED display
Adafruit_SH1106G display = Adafruit_SH1106G(128, 64,OLED_MOSI, OLED_CLK, OLED_DC, OLED_RST, OLED_CS);

int column1[] = {0, 1, 2, 3, 4, 5, 6};
int column2[] = {7, 0, 6, 8, 9, 5, 10};
int column3[] = {11, 12, 8, 13, 14, 2, 9};
int column4[] = {15, 16, 17, 4, 13, 10, 18};
int column5[] = {19, 18, 17, 20, 16, 21, 22};
int column6[] = {15, 7, 23, 24, 19, 25, 26};
int *columns[] = {column1, column2, column3, column4, column5, column6};

// '1', 24x24px
const unsigned char epd_bitmap_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xe7, 0x00, 0x01, 
	0xc3, 0x80, 0x03, 0x81, 0xc0, 0x07, 0x00, 0xe0, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 
	0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x07, 0x00, 0xe0, 0x03, 0x81, 0xc0, 0x01, 0xc3, 0x80, 
	0x00, 0xff, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '10', 24x24px
const unsigned char epd_bitmap_10 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x24, 0x00, 0x00, 
	0x66, 0x00, 0x00, 0x42, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x81, 0x00, 0x1f, 0x81, 0xf8, 0x38, 0x00, 
	0x1c, 0x0e, 0x00, 0x70, 0x03, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x03, 0x00, 0xc0, 0x02, 0x00, 0x40, 
	0x06, 0x3c, 0x60, 0x04, 0x66, 0x20, 0x0c, 0xc3, 0x30, 0x09, 0x81, 0x90, 0x0f, 0x00, 0xf0, 0x0c, 
	0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '11', 24x24px
const unsigned char epd_bitmap_11 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 
	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x78, 
	0x00, 0x01, 0xc0, 0x00, 0x03, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x60, 0x06, 0x00, 0xe0, 
	0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0xe0, 0x07, 0x01, 0xc0, 0x03, 0xc7, 0x80, 0x00, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '12', 24x24px
const unsigned char epd_bitmap_12 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x01, 0xc3, 0x80, 0x02, 0x00, 0x40, 0x04, 
	0x3c, 0x20, 0x08, 0xff, 0x10, 0x11, 0xc1, 0x08, 0x13, 0x01, 0x88, 0x16, 0x01, 0x88, 0x26, 0x00, 
	0x04, 0x26, 0x00, 0x04, 0x26, 0x00, 0x04, 0x26, 0x00, 0x04, 0x12, 0x01, 0x88, 0x13, 0x01, 0x88, 
	0x11, 0xc1, 0x08, 0x08, 0xff, 0x10, 0x04, 0x3c, 0x20, 0x02, 0x00, 0x40, 0x01, 0xc3, 0x80, 0x00, 
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '13', 24x24px
const unsigned char epd_bitmap_13 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x01, 0xc3, 0x00, 0x03, 0x19, 0x80, 0x00, 
	0x18, 0x00, 0x00, 0x08, 0x00, 0x02, 0x18, 0x40, 0x06, 0x00, 0x60, 0x0c, 0x00, 0x30, 0x08, 0x00, 
	0x10, 0x18, 0x00, 0x18, 0x10, 0x00, 0x08, 0x10, 0x00, 0x08, 0x30, 0x00, 0x0c, 0x20, 0x00, 0x04, 
	0x20, 0x00, 0x04, 0x20, 0x00, 0x04, 0x20, 0x00, 0x04, 0x30, 0x3c, 0x0c, 0x18, 0xe7, 0x18, 0x0f, 
	0x81, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '14', 24x24px
const unsigned char epd_bitmap_14 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7e, 0x1c, 0x3c, 0x18, 0x3c, 0x34, 0x18, 0x6c, 0x06, 
	0x18, 0x40, 0x02, 0x18, 0xc0, 0x03, 0x18, 0xc0, 0x01, 0x99, 0x80, 0x00, 0xff, 0x80, 0x00, 0x7e, 
	0x00, 0x01, 0xff, 0x00, 0x03, 0x9b, 0x80, 0x03, 0x19, 0xc0, 0x06, 0x18, 0xc0, 0x06, 0x18, 0x60, 
	0x0c, 0x18, 0x70, 0x0c, 0x18, 0x3c, 0x0c, 0x18, 0x1c, 0x38, 0x7e, 0x0c, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '15', 24x24px
const unsigned char epd_bitmap_15 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x1f, 0xff, 0x00, 0x38, 0x03, 0x80, 0x30, 
	0x01, 0xc0, 0x30, 0x01, 0xc0, 0x00, 0x03, 0x80, 0x00, 0x07, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x7f, 
	0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '16', 24x24px
const unsigned char epd_bitmap_16 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x83, 0xf0, 0x07, 0xff, 0xf0, 0x06, 0x7e, 0x00, 0x0c, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x7f, 0x80, 0x0d, 0xff, 0xc0, 0x0f, 0x80, 0xe0, 0x0f, 0x00, 
	0x60, 0x0e, 0x00, 0x70, 0x0c, 0x00, 0x30, 0x0c, 0x00, 0x30, 0x0c, 0x00, 0x30, 0x0e, 0x00, 0x30, 
	0x06, 0x00, 0x70, 0x07, 0x00, 0x60, 0x03, 0x80, 0x60, 0x01, 0xc0, 0xc0, 0x00, 0xff, 0xc0, 0x00, 
	0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '2', 24x24px
const unsigned char epd_bitmap_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x66, 0x00, 0x00, 
	0x66, 0x00, 0x00, 0x42, 0x00, 0x00, 0xc3, 0x00, 0x00, 0xc3, 0x00, 0x01, 0x81, 0x80, 0x01, 0x81, 
	0x80, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0x06, 0x18, 0x60, 0x06, 0x18, 0x60, 0x0c, 0x18, 0x30, 
	0x0c, 0x18, 0x30, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x18, 0x0c, 0x30, 
	0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '17', 24x24px
const unsigned char epd_bitmap_17 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x03, 0xfe, 0x40, 0x07, 0xfe, 0x40, 0x07, 
	0xfe, 0x40, 0x0f, 0xfe, 0x40, 0x0f, 0xfe, 0x40, 0x0f, 0xfe, 0x40, 0x0f, 0xfe, 0x40, 0x07, 0xfe, 
	0x40, 0x07, 0xfe, 0x40, 0x03, 0xfe, 0x40, 0x00, 0xfe, 0x40, 0x00, 0x3e, 0x40, 0x00, 0x00, 0x40, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '18', 24x24px
const unsigned char epd_bitmap_18 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x0f, 
	0xff, 0x00, 0x1f, 0xff, 0x80, 0x18, 0x61, 0x80, 0x10, 0x60, 0x80, 0x00, 0x60, 0x00, 0x00, 0x7f, 
	0xc0, 0x00, 0x7f, 0xf0, 0x00, 0x70, 0x30, 0x00, 0x60, 0x38, 0x00, 0x60, 0x18, 0x00, 0x60, 0x18, 
	0x00, 0x60, 0x18, 0x00, 0x60, 0x30, 0x00, 0x70, 0xf0, 0x03, 0xff, 0xe0, 0x03, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '19', 24x24px
const unsigned char epd_bitmap_19 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x66, 0x0c, 0x30, 0x00, 0x0c, 0x30, 0x00, 0x0c, 0x30, 0x00, 
	0x1c, 0x38, 0x00, 0x38, 0x1f, 0xff, 0xf0, 0x03, 0xff, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x24, 0x00, 
	0x00, 0x24, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '20', 24x24px
const unsigned char epd_bitmap_20 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xff, 0x1c, 0x1c, 0x7e, 0x38, 0x0c, 0x18, 0x30, 0x0c, 
	0x18, 0x30, 0x0c, 0x18, 0x30, 0x0e, 0x18, 0x70, 0x06, 0x18, 0x60, 0x06, 0x18, 0x60, 0x06, 0x18, 
	0x60, 0x06, 0x18, 0x60, 0x07, 0x18, 0xe0, 0x03, 0x99, 0xc0, 0x01, 0xff, 0x80, 0x00, 0xff, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x7e, 0x00, 0x00, 
	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '21', 24x24px
const unsigned char epd_bitmap_21 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x01, 0xff, 0xe0, 0x07, 0x80, 0x70, 0x0e, 
	0x00, 0x18, 0x0c, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x0c, 
	0x00, 0x18, 0x0c, 0x00, 0x18, 0x0c, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x18, 0x00, 0x00, 0x0c, 0x00, 0x18, 0x0e, 0x00, 0x18, 0x07, 0x80, 0x70, 0x01, 0xff, 0xe0, 0x00, 
	0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '22', 24x24px
const unsigned char epd_bitmap_22 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x22, 0x00, 0x00, 0x14, 0x00, 0x00, 
	0x7f, 0x80, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 
	0xe0, 0x00, 0x01, 0xc0, 0x00, 0x1f, 0x80, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x60, 
	0x01, 0x80, 0x60, 0x03, 0xff, 0xe0, 0x06, 0x7f, 0xc0, 0x06, 0x00, 0x00, 0x03, 0x1f, 0x00, 0x01, 
	0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '23', 24x24px
const unsigned char epd_bitmap_23 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 
	0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x1f, 0xff, 0xf8, 0x3f, 0xff, 
	0xfc, 0x0f, 0xff, 0xf0, 0x03, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0, 
	0x07, 0xff, 0xe0, 0x07, 0xe7, 0xe0, 0x0f, 0xc3, 0xf0, 0x0f, 0x81, 0xf0, 0x0f, 0x00, 0xf0, 0x0c, 
	0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '24', 24x24px
const unsigned char epd_bitmap_24 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x1c, 0x30, 0x00, 0x3e, 0x78, 0x00, 
	0x1f, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x07, 0xe0, 0x04, 0x0f, 0xf0, 0x0e, 0x1f, 
	0xf8, 0x1f, 0x3e, 0x7c, 0x0f, 0xfc, 0x38, 0x07, 0xf8, 0x10, 0x03, 0xf0, 0x00, 0x03, 0xf0, 0x00, 
	0x07, 0xf8, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0x3e, 0x00, 0x1e, 0x1c, 0x00, 0x0c, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '25', 24x24px
const unsigned char epd_bitmap_25 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xc0, 0x0f, 
	0x83, 0xe0, 0x1d, 0xcf, 0x70, 0x38, 0xfc, 0x38, 0x30, 0x78, 0x18, 0x00, 0x30, 0x0c, 0x00, 0x30, 
	0x0c, 0x03, 0xff, 0xfc, 0x0f, 0xff, 0xfc, 0x1c, 0x30, 0x00, 0x18, 0x30, 0x00, 0x30, 0x38, 0x0c, 
	0x30, 0x7c, 0x1c, 0x31, 0xef, 0x38, 0x3f, 0x83, 0xf0, 0x1e, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '26', 24x24px
const unsigned char epd_bitmap_26 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x80, 0x00, 0x80, 0x80, 0x00, 0x63, 0x00, 0x00, 
	0x1c, 0x00, 0x0f, 0x00, 0xf0, 0x06, 0x00, 0x60, 0x06, 0x00, 0xe0, 0x06, 0x03, 0xe0, 0x06, 0x06, 
	0x60, 0x06, 0x1c, 0x60, 0x06, 0x30, 0x60, 0x06, 0xe0, 0x60, 0x07, 0x80, 0x60, 0x07, 0x00, 0x60, 
	0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x0f, 0x00, 0xf0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x30, 0x00, 
	0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '27', 24x24px
const unsigned char epd_bitmap_27 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x01, 0xff, 0x80, 0x03, 0x81, 0xc0, 0x06, 
	0x00, 0x60, 0x0c, 0x00, 0x30, 0x18, 0x00, 0x18, 0x38, 0x00, 0x1c, 0x30, 0x00, 0x0c, 0x30, 0x00, 
	0x0c, 0x30, 0x00, 0x0c, 0x30, 0x00, 0x0c, 0x38, 0x00, 0x1c, 0x1c, 0x00, 0x38, 0x0e, 0x00, 0x70, 
	0x07, 0x00, 0xe0, 0x03, 0xc3, 0xc0, 0x00, 0xc3, 0x00, 0x20, 0xc3, 0x04, 0x3f, 0xc3, 0xfc, 0x3f, 
	0xc3, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '3', 24x24px
const unsigned char epd_bitmap_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x33, 0x04, 0x00, 0x13, 0x8c, 0x00, 0x01, 
	0xf8, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x07, 0x30, 0x00, 0x04, 0x38, 0x00, 0x00, 0x78, 
	0x00, 0x00, 0xec, 0x00, 0x00, 0xc6, 0x00, 0x01, 0xc6, 0x00, 0x03, 0x83, 0x00, 0x03, 0x83, 0x00, 
	0x07, 0x01, 0x80, 0x06, 0x01, 0xc4, 0x0e, 0x00, 0xcc, 0x0c, 0x00, 0x6c, 0x1c, 0x00, 0x7c, 0x38, 
	0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '4', 24x24px
const unsigned char epd_bitmap_4 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 
	0x00, 0x18, 0x03, 0x00, 0x38, 0x03, 0x00, 0xf0, 0x06, 0x03, 0xf0, 0x06, 0x0f, 0x30, 0x06, 0x1c, 
	0x60, 0x0c, 0x78, 0x60, 0x0d, 0xe0, 0x60, 0x0f, 0x80, 0xe0, 0x0e, 0x00, 0xc0, 0x1c, 0x01, 0xc0, 
	0x18, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x7c, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '5', 24x24px
const unsigned char epd_bitmap_5 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xff, 0xfc, 0x33, 0xff, 0xfc, 0x31, 0x80, 0x18, 0x30, 
	0xc0, 0x30, 0x30, 0xc0, 0x30, 0x30, 0x60, 0x60, 0x30, 0x60, 0x60, 0x30, 0x30, 0xc0, 0x3f, 0xf0, 
	0xc0, 0x3f, 0xf9, 0x80, 0x30, 0x19, 0x80, 0x30, 0x0f, 0x00, 0x30, 0x3f, 0xc0, 0x30, 0x76, 0xe0, 
	0x30, 0xe6, 0x70, 0x30, 0xc6, 0x30, 0x31, 0x86, 0x18, 0x31, 0x86, 0x18, 0x33, 0x06, 0x0c, 0x33, 
	0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '6', 24x24px
const unsigned char epd_bitmap_6 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x70, 0x3c, 0x00, 0xd8, 0x26, 0x01, 0x98, 0x02, 
	0x03, 0x30, 0x03, 0x02, 0x60, 0x03, 0x06, 0xc0, 0x03, 0x07, 0x80, 0x01, 0x8e, 0x00, 0x01, 0xbc, 
	0x00, 0x01, 0xfc, 0x0c, 0x01, 0xfc, 0x1c, 0x03, 0x8c, 0x3c, 0x0f, 0x0f, 0xec, 0x19, 0x07, 0xcc, 
	0x13, 0x00, 0x0c, 0x36, 0x00, 0x18, 0x24, 0x00, 0x30, 0x3c, 0x00, 0xe0, 0x18, 0x07, 0xc0, 0x00, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '7', 24x24px
const unsigned char epd_bitmap_7 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xff, 0x80, 0x0e, 0x01, 0xe0, 0x18, 
	0x00, 0x70, 0x18, 0x00, 0x30, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x30, 
	0x18, 0x00, 0x30, 0x18, 0x00, 0x30, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 
	0x00, 0x00, 0x18, 0x18, 0x00, 0x30, 0x18, 0x00, 0x70, 0x0e, 0x01, 0xe0, 0x07, 0xff, 0x80, 0x01, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '8', 24x24px
const unsigned char epd_bitmap_8 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xff, 0x80, 0x0f, 0xff, 0xc0, 0x1c, 0x00, 0xe0, 0x18, 0x00, 0x70, 0x18, 0x00, 0x30, 0x18, 0x00, 
	0x38, 0x00, 0x00, 0x18, 0x00, 0x3f, 0xf8, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 
	0x18, 0x00, 0x30, 0x18, 0x00, 0x70, 0x1c, 0x00, 0xe0, 0x0f, 0xff, 0xc0, 0x03, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '9', 24x24px
const unsigned char epd_bitmap_9 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0xc0, 0x00, 0x03, 0x87, 0x00, 0x07, 
	0x1f, 0xc0, 0x0e, 0x18, 0xc0, 0x0c, 0x30, 0x60, 0x18, 0x30, 0x60, 0x18, 0x60, 0x30, 0x30, 0x60, 
	0x30, 0x30, 0x60, 0x30, 0x30, 0x60, 0x30, 0x30, 0x60, 0x30, 0x30, 0x60, 0x30, 0x18, 0x30, 0x60, 
	0x18, 0x38, 0xe4, 0x0c, 0x1c, 0xcc, 0x0e, 0x0f, 0xdc, 0x07, 0x07, 0xf8, 0x01, 0xfe, 0x70, 0x00, 
	0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 2592)
const int epd_bitmap_allArray_LEN = 27;
const unsigned char* epd_bitmap_allArray[27] = {
    epd_bitmap_1,
    epd_bitmap_2,
    epd_bitmap_3,
    epd_bitmap_4,
    epd_bitmap_5,
    epd_bitmap_6,
    epd_bitmap_7,
    epd_bitmap_8,
    epd_bitmap_9,
    epd_bitmap_10,
    epd_bitmap_11,
    epd_bitmap_12,
    epd_bitmap_13,
    epd_bitmap_14,
    epd_bitmap_15,
    epd_bitmap_16,
    epd_bitmap_17,
    epd_bitmap_18,
    epd_bitmap_19,
    epd_bitmap_20,
    epd_bitmap_21,
    epd_bitmap_22,
    epd_bitmap_23,
    epd_bitmap_24,
    epd_bitmap_25,
    epd_bitmap_26,
    epd_bitmap_27
};

void selectRandomElements(int *array, int *selectedElements, int *selectedIndices, int arraySize, int numSelections) {
  for (int i = 0; i < numSelections; i++) {
    int index;
    bool unique;

    // Ensure unique selection
    do {
      unique = true;
      index = random(0, arraySize);

      // Check if the index has already been selected
      for (int j = 0; j < i; j++) {
        if (selectedIndices[j] == index) {
          unique = false;
          break;
        }
      }
    } while (!unique);

    // Store the selected element and its index
    selectedIndices[i] = index;
    selectedElements[i] = array[index];
  }
}

// Function to get the indices of the sorted values
void getSortedIndices(int *array, int *sortedIndices, int size) {
  // Initialize the sortedIndices array
  for (int i = 0; i < size; i++) {
    sortedIndices[i] = i;
  }

  // Sort the indices based on the values in the original array (using bubble sort for simplicity)
  for (int i = 0; i < size - 1; i++) {
    for (int j = 0; j < size - i - 1; j++) {
      if (array[sortedIndices[j]] > array[sortedIndices[j + 1]]) {
        // Swap indices if the corresponding values are out of order
        int temp = sortedIndices[j];
        sortedIndices[j] = sortedIndices[j + 1];
        sortedIndices[j + 1] = temp;
      }
    }
  }
}

int img_order[4];
int solution[4];

void generateSolution() {
  int randomIndex = random(0, 6);
  int *selectedColumn = columns[randomIndex];
  Serial.print("Selected Column: ");
  int column_num = randomIndex + 1;
  Serial.println(column_num);
  int relative_idx[4];
  selectRandomElements(selectedColumn, img_order, relative_idx, 7, 4);
  Serial.print("Image order: ");
  for (int i = 0; i<4; i++) {
    Serial.print(img_order[i]);
    Serial.print(", ");
  } 
  Serial.println("");
  Serial.print("Relative index: ");
  for (int i = 0; i<4; i++) {
    Serial.print(relative_idx[i]);
    Serial.print(", ");
  } 
  Serial.println("");
  getSortedIndices(relative_idx,solution,4);

}

unsigned int X_COORDS [] = {24, 80, 24, 80};
unsigned int Y_COORDS [] = {8, 8, 32, 32};

#define IMG_HEIGHT 24
#define IMG_WIDTH  24

void initDisplay(int *img_order) {
  // Start OLED
  
  display.begin(0, true); // we dont use the i2c address but we will reset!
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(2000);
  // Clear the buffer.
  display.clearDisplay();
  int idx = 0;
  for (uint8_t f = 0; f < 4; f++) {
      idx = img_order[f];
      display.drawBitmap(X_COORDS[f], Y_COORDS[f], epd_bitmap_allArray[idx], IMG_WIDTH, IMG_HEIGHT, SH110X_WHITE);
    }
    display.display();
    delay(200);


}
int counter = 0;
void readButtons() {
  int current;
  bool pressed = false;
  button1.read();
  button2.read();
  button3.read();
  button4.read();
  if (button1.pressed()) {
    current = 0;
    pressed = true;
  }
  if (button2.pressed()) {
    current = 1;
    pressed = true;
  }
  if (button3.pressed()) {
    current = 2;
    pressed = true;
  }
  if (button4.pressed()) {
    current = 3;
    pressed = true;
  }

  if (pressed & (current == solution[counter])) {
    pressed = false;
    counter++;
    Serial.print(counter);
    if (counter == 4) {
      digitalWrite(3, HIGH);
      while(1);
    }
  }
  else if (pressed & (current != solution[counter])) {
    pressed = false;
    counter = 0;
    digitalWrite(2, HIGH);
    delay(1000);
    digitalWrite(2, LOW);
  }
}

void setup()   {

  pinMode(button1.pin,      INPUT);
  pinMode(button2.pin,      INPUT);
  pinMode(button3.pin,      INPUT);
  pinMode(button4.pin,      INPUT);
  pinMode(3, OUTPUT);
  pinMode(2, OUTPUT);

  Serial.begin(9600); delay(500);
  
  randomSeed(esp_random());
  // randomSeed(analogRead(0));  // Seed the random function
  //display.setContrast (0); // dim display
  
  generateSolution();
  initDisplay(img_order);
  

  Serial.print("Solution: ");
  for (int i = 0; i<4; i++) {
    int button_num = solution[i] + 1;
    Serial.print(button_num);
    Serial.print(", ");
  } 
  
  //testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_HEIGHT, LOGO16_GLCD_WIDTH);
}


void loop() {
  readButtons();
}